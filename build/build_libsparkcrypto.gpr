project Build_Libsparkcrypto
is
   type Mode_Type      		is ("debug", "release");
   type Arch_Type      		is ("x86_64", "i686", "generic_be");
   type Endianess_Type 		is ("little_endian", "big_endian");
   type IO_Type        		is ("textio", "nullio");
   type Runtime_Type   		is ("native", "zfp");
   type Optimization_Type	is ("s", "0", "1", "2", "3");

   Mode      	 : Mode_Type := external ("mode", "release");
   Arch      	 : Arch_Type := external ("arch", "x86_64");
   Endianess 	 : Endianess_Type := external ("endianess", "little_endian");
   IO        	 : IO_Type := external ("io", "textio");
   Runtime   	 : Runtime_Type := external ("runtime", "native");

   Src         := "../src/";
   Default_Opt := "1";

   Compiler_Switches := ();
   Builder_Switches := ();

   Style_Switches :=
   ("-gnaty" &
      "3" & -- indentation
      "a" & -- attribute casing
      "A" & -- array attribute indexes
      "b" & -- no blanks at line end
      "e" & -- end/exit labels
      "f" & -- no form feeds/vertical tabs
      "h" & -- no horizontal tabs
      "i" & -- if-then layout
      "k" & -- keyword casing
      "l" & -- layout
      "n" & -- casing of standard identifiers
      "p" & -- pragma casing
      "r" & -- identifier casing
      "S" & -- lines after THEN or ELSE
      "t" & -- token separation rules
      "u" & -- no unecessary blank lines
      "x"   -- no extra parenthesis around conditionals
   );

   for Library_Name     use "sparkcrypto";
   for Library_Kind     use "static";
   for Library_Dir      use "../out/build/adalib";
   for Library_Src_Dir  use "../out/build/adainclude";

   for Object_Dir use "../out/build";

   for Source_Dirs use
      (Src & "ada/" & IO,
       Src & "ada/" & Arch,
       Src & "ada/generic",
       Src & "shared/" & Endianess,
       Src & "shared/generic");

   case Mode is
      when "release" =>
         Compiler_Switches := ("-gnatN", "-gnatn", "-Winline", "-gnatp", "-funroll-loops");
         Default_Opt := "3";

      when "debug" =>
         Compiler_Switches := ("-gnata");
         Default_Opt := "0";

   end case;

   case Runtime is
      when "native" =>
         Builder_Switches := ();

      when "zfp" =>
         Builder_Switches := ("--RTS=zfp");

   end case;

   package Builder is
      for Default_Switches ("Ada") use Builder_Switches;
   end Builder;

   Optimization : Optimization_Type := external ("opt", Default_Opt);

   package Compiler is
      for Default_Switches ("Ada") use  Style_Switches & Compiler_Switches &
         ("-O" & Optimization, "-ffunction-sections", "-fdata-sections", "-gnatwa", "-gnatwe");
   end Compiler;

end Build_Libsparkcrypto;
