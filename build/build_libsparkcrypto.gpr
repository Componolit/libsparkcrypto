project Build_Libsparkcrypto
is
   type Mode_Type      		is ("debug", "release", "stack");
   type Lib_Type      	   is ("static", "dynamic");
   type Arch_Type      		is ("x86_64", "i686", "generic_be");
   type Endianess_Type 		is ("little_endian", "big_endian");
   type IO_Type        		is ("textio", "nullio");
   type Runtime_Type   		is ("native", "zfp");
   type Optimization_Type	is ("s", "0", "1", "2", "3");
   type Callgraph_Type	   is ("none", "su", "su_da");

   Mode      	 : Mode_Type := external ("mode", "release");
   Arch      	 : Arch_Type := external ("arch", "x86_64");
   Endianess 	 : Endianess_Type := external ("endianess", "little_endian");
   IO        	 : IO_Type := "textio";
   Runtime   	 : Runtime_Type := external ("RTS", "native");
   Linking      : Lib_Type := external ("libtype", "static");
   Callgraph    : Callgraph_Type := external ("callgraph", "none");

   Src         := "../src/";
   Default_Opt := "1";

   Compiler_Switches := ();
   Builder_Switches := ();

   Style_Switches :=
   ("-gnaty" &
      "3" & -- indentation
      "a" & -- attribute casing
      "A" & -- array attribute indexes
      "b" & -- no blanks at line end
      "e" & -- end/exit labels
      "f" & -- no form feeds/vertical tabs
      "h" & -- no horizontal tabs
      "i" & -- if-then layout
      "k" & -- keyword casing
      "l" & -- layout
      "n" & -- casing of standard identifiers
      "p" & -- pragma casing
      "r" & -- identifier casing
      "S" & -- lines after THEN or ELSE
      "t" & -- token separation rules
      "u" & -- no unecessary blank lines
      "x"   -- no extra parenthesis around conditionals
   );

   for Library_Name     use "sparkcrypto";
   for Library_Kind     use Linking;
   for Library_Dir      use "../out/build/adalib/" & Runtime;
   for Create_Missing_Dirs use "True";

   for Object_Dir use "../out/build/" & Runtime;

   case Runtime is
      when "native" =>
         Builder_Switches := ();
         IO := "textio";

      when "zfp" =>
         Builder_Switches := ("--RTS=zfp");
         IO := "nullio";

   end case;

   for Source_Dirs use
      (Src & "ada/" & IO,
       Src & "ada/" & Arch,
       Src & "ada/generic",
       Src & "shared/" & Endianess,
       Src & "shared/generic");

   case Mode is
      when "release" =>
         Compiler_Switches := ("-gnatn", "-Winline", "-gnatp", "-funroll-loops", "-gnatef");
         Default_Opt := "3";

      when "stack" =>
         Compiler_Switches := ("-gnatn", "-Winline", "-gnatp", "-funroll-loops", "-fcallgraph-info=su,da");
         Default_Opt := "2";

      when "debug" =>
         Compiler_Switches := ("-gnatef");
         Default_Opt := "0";

   end case;

   package Builder is
      for Default_Switches ("Ada") use Builder_Switches;
   end Builder;

   Optimization : Optimization_Type := external ("opt", Default_Opt);

   package Compiler is
      for Default_Switches ("Ada") use  Style_Switches & Compiler_Switches &
         ("-O" & Optimization, "-ffunction-sections", "-fdata-sections", "-gnatwa", "-gnatwe");
      for Local_Configuration_Pragmas use "pragmas.adc";
   end Compiler;

   package Prove is
      for Switches use ("--timeout=60", "-j5", "--proof=progressive", "--prover=z3,cvc4,altergo");
      for Proof_Dir use "../out/proof";
   end Prove;

   package Stack is
      --  The stack depth of external functions (-u) must be validated
      for Switches use ("-Wa", "-a", "-p", "-ca", "-x", "-u64", "-l", "5", "-Q");
   end Stack;

end Build_Libsparkcrypto;
